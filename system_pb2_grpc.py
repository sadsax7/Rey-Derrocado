# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import system_pb2 as system__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in system_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ProxyServiceStub(object):
    """Definición del servicio ProxyService
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Write = channel.unary_unary(
                '/ProxyService/Write',
                request_serializer=system__pb2.WriteRequest.SerializeToString,
                response_deserializer=system__pb2.WriteResponse.FromString,
                _registered_method=True)
        self.Read = channel.unary_unary(
                '/ProxyService/Read',
                request_serializer=system__pb2.ReadRequest.SerializeToString,
                response_deserializer=system__pb2.ReadResponse.FromString,
                _registered_method=True)
        self.RegisterFollower = channel.unary_unary(
                '/ProxyService/RegisterFollower',
                request_serializer=system__pb2.RegisterRequest.SerializeToString,
                response_deserializer=system__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.UpdateLeader = channel.unary_unary(
                '/ProxyService/UpdateLeader',
                request_serializer=system__pb2.LeaderInfo.SerializeToString,
                response_deserializer=system__pb2.LeaderUpdateResponse.FromString,
                _registered_method=True)
        self.HeartBeats = channel.unary_stream(
                '/ProxyService/HeartBeats',
                request_serializer=system__pb2.Beats.SerializeToString,
                response_deserializer=system__pb2.WriteResponse.FromString,
                _registered_method=True)
        self.ClienteVivo = channel.stream_unary(
                '/ProxyService/ClienteVivo',
                request_serializer=system__pb2.WriteRequest.SerializeToString,
                response_deserializer=system__pb2.LatidosRecibidos.FromString,
                _registered_method=True)
        self.Bidireccional = channel.stream_stream(
                '/ProxyService/Bidireccional',
                request_serializer=system__pb2.WriteRequest.SerializeToString,
                response_deserializer=system__pb2.WriteResponse.FromString,
                _registered_method=True)


class ProxyServiceServicer(object):
    """Definición del servicio ProxyService
    """

    def Write(self, request, context):
        """El cliente envia un mensaje WriteRequest y el proxy responde con WriteResponse
        Un método para realizar escritura: Write
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read(self, request, context):
        """El cliente envia un mensaje ReadRequest y el proxy responde con ReadResponse
        Un método para realizar lectura: Read
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterFollower(self, request, context):
        """Envio peticion a follower para saber que esta vivo y lo guardo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateLeader(self, request, context):
        """Nuevo método para actualizar la identidad del líder
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HeartBeats(self, request, context):
        """streaming del proxy [latidos]
        quitar
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClienteVivo(self, request_iterator, context):
        """El cliente streaming [le manda señales de conexion al proxy]
        quitar
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Bidireccional(self, request_iterator, context):
        """Los dos streaming [se mandan ambos señales de vida]
        quitar
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProxyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=system__pb2.WriteRequest.FromString,
                    response_serializer=system__pb2.WriteResponse.SerializeToString,
            ),
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=system__pb2.ReadRequest.FromString,
                    response_serializer=system__pb2.ReadResponse.SerializeToString,
            ),
            'RegisterFollower': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterFollower,
                    request_deserializer=system__pb2.RegisterRequest.FromString,
                    response_serializer=system__pb2.RegisterResponse.SerializeToString,
            ),
            'UpdateLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateLeader,
                    request_deserializer=system__pb2.LeaderInfo.FromString,
                    response_serializer=system__pb2.LeaderUpdateResponse.SerializeToString,
            ),
            'HeartBeats': grpc.unary_stream_rpc_method_handler(
                    servicer.HeartBeats,
                    request_deserializer=system__pb2.Beats.FromString,
                    response_serializer=system__pb2.WriteResponse.SerializeToString,
            ),
            'ClienteVivo': grpc.stream_unary_rpc_method_handler(
                    servicer.ClienteVivo,
                    request_deserializer=system__pb2.WriteRequest.FromString,
                    response_serializer=system__pb2.LatidosRecibidos.SerializeToString,
            ),
            'Bidireccional': grpc.stream_stream_rpc_method_handler(
                    servicer.Bidireccional,
                    request_deserializer=system__pb2.WriteRequest.FromString,
                    response_serializer=system__pb2.WriteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ProxyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ProxyService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ProxyService(object):
    """Definición del servicio ProxyService
    """

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ProxyService/Write',
            system__pb2.WriteRequest.SerializeToString,
            system__pb2.WriteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ProxyService/Read',
            system__pb2.ReadRequest.SerializeToString,
            system__pb2.ReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterFollower(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ProxyService/RegisterFollower',
            system__pb2.RegisterRequest.SerializeToString,
            system__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ProxyService/UpdateLeader',
            system__pb2.LeaderInfo.SerializeToString,
            system__pb2.LeaderUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HeartBeats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ProxyService/HeartBeats',
            system__pb2.Beats.SerializeToString,
            system__pb2.WriteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ClienteVivo(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/ProxyService/ClienteVivo',
            system__pb2.WriteRequest.SerializeToString,
            system__pb2.LatidosRecibidos.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Bidireccional(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/ProxyService/Bidireccional',
            system__pb2.WriteRequest.SerializeToString,
            system__pb2.WriteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class LeaderServiceStub(object):
    """Servicio escritura en el log del lider
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Write = channel.unary_unary(
                '/LeaderService/Write',
                request_serializer=system__pb2.WriteRequest.SerializeToString,
                response_deserializer=system__pb2.WriteResponse.FromString,
                _registered_method=True)
        self.RegisterFollower = channel.unary_unary(
                '/LeaderService/RegisterFollower',
                request_serializer=system__pb2.RegisterRequest.SerializeToString,
                response_deserializer=system__pb2.RegisterResponse.FromString,
                _registered_method=True)


class LeaderServiceServicer(object):
    """Servicio escritura en el log del lider
    """

    def Write(self, request, context):
        """Recibe peticion del proxy de escritura
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterFollower(self, request, context):
        """Envio peticion a follower para saber que esta vivo y lo guardo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LeaderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=system__pb2.WriteRequest.FromString,
                    response_serializer=system__pb2.WriteResponse.SerializeToString,
            ),
            'RegisterFollower': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterFollower,
                    request_deserializer=system__pb2.RegisterRequest.FromString,
                    response_serializer=system__pb2.RegisterResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LeaderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('LeaderService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LeaderService(object):
    """Servicio escritura en el log del lider
    """

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LeaderService/Write',
            system__pb2.WriteRequest.SerializeToString,
            system__pb2.WriteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterFollower(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LeaderService/RegisterFollower',
            system__pb2.RegisterRequest.SerializeToString,
            system__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class FollowerServiceStub(object):
    """Servicio de lectura del log de cada follower}
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Write = channel.unary_unary(
                '/FollowerService/Write',
                request_serializer=system__pb2.WriteRequest.SerializeToString,
                response_deserializer=system__pb2.WriteResponse.FromString,
                _registered_method=True)
        self.Read = channel.unary_unary(
                '/FollowerService/Read',
                request_serializer=system__pb2.ReadRequest.SerializeToString,
                response_deserializer=system__pb2.ReadResponse.FromString,
                _registered_method=True)
        self.Replicate = channel.unary_unary(
                '/FollowerService/Replicate',
                request_serializer=system__pb2.ReplicationRequest.SerializeToString,
                response_deserializer=system__pb2.ReplicationResponse.FromString,
                _registered_method=True)
        self.ReceiveHeartBeats = channel.unary_unary(
                '/FollowerService/ReceiveHeartBeats',
                request_serializer=system__pb2.HeartBeat.SerializeToString,
                response_deserializer=system__pb2.HeartBeatsResponse.FromString,
                _registered_method=True)
        self.VoteRequest = channel.unary_unary(
                '/FollowerService/VoteRequest',
                request_serializer=system__pb2.LenLog.SerializeToString,
                response_deserializer=system__pb2.Vote.FromString,
                _registered_method=True)


class FollowerServiceServicer(object):
    """Servicio de lectura del log de cada follower}
    """

    def Write(self, request, context):
        """Recibe peticion del proxy de escritura
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read(self, request, context):
        """Recibe peticion del proxy de lectura
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Replicate(self, request, context):
        """Recibe solicitud del líder para replicar la entrada del log
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveHeartBeats(self, request, context):
        """Recibe latidos periodicos del lider}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VoteRequest(self, request, context):
        """Pide votos a todos los followers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FollowerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=system__pb2.WriteRequest.FromString,
                    response_serializer=system__pb2.WriteResponse.SerializeToString,
            ),
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=system__pb2.ReadRequest.FromString,
                    response_serializer=system__pb2.ReadResponse.SerializeToString,
            ),
            'Replicate': grpc.unary_unary_rpc_method_handler(
                    servicer.Replicate,
                    request_deserializer=system__pb2.ReplicationRequest.FromString,
                    response_serializer=system__pb2.ReplicationResponse.SerializeToString,
            ),
            'ReceiveHeartBeats': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveHeartBeats,
                    request_deserializer=system__pb2.HeartBeat.FromString,
                    response_serializer=system__pb2.HeartBeatsResponse.SerializeToString,
            ),
            'VoteRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.VoteRequest,
                    request_deserializer=system__pb2.LenLog.FromString,
                    response_serializer=system__pb2.Vote.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FollowerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('FollowerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FollowerService(object):
    """Servicio de lectura del log de cada follower}
    """

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FollowerService/Write',
            system__pb2.WriteRequest.SerializeToString,
            system__pb2.WriteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FollowerService/Read',
            system__pb2.ReadRequest.SerializeToString,
            system__pb2.ReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Replicate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FollowerService/Replicate',
            system__pb2.ReplicationRequest.SerializeToString,
            system__pb2.ReplicationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReceiveHeartBeats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FollowerService/ReceiveHeartBeats',
            system__pb2.HeartBeat.SerializeToString,
            system__pb2.HeartBeatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VoteRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FollowerService/VoteRequest',
            system__pb2.LenLog.SerializeToString,
            system__pb2.Vote.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
